---
- name: "Create volume parent dir"
  ansible.builtin.file:
    state: directory
    path: /var/data/k8s/pv-{{ ansible_hostname }}

- name: "Install kubernetes python library so that latest ansible tasks can use it"
  ansible.builtin.package:
    name: python3-kubernetes

- name: "Create storage class"
  run_once: true
  block:
    - name: "Create manifest for storage class"
      ansible.builtin.tempfile:
        state: file
      register: storage_manifest

    - name: "Define manifest for storage class"
      ansible.builtin.template:
        src: storage_manifest.yml.j2
        dest: "{{ storage_manifest.path }}"

    - name: "Apply manifest for storage class"
      ansible.builtin.command: kubectl apply -f {{ storage_manifest.path }}

- name: "Set up volumes for each node"
  # delegate to a host in the control plane so that kubectl will be available
  delegate_to: "{{ groups['kube_control_plane'] | first }}"
  block:
    - name: "Create manifest for volumes"
      ansible.builtin.tempfile:
        state: file
      register: volume_manifest

    - name: "Define manifest for volumes"
      ansible.builtin.template:
        src: volume_manifest.yml.j2
        dest: "{{ volume_manifest.path }}"

    - name: "Set up volumes"
      ansible.builtin.command: kubectl apply -f {{ volume_manifest.path }}

- name: Install helm and run charts
  run_once: true
  block:
    - name: "Install apt-transport-https"
      ansible.builtin.package:
        name: apt-transport-https
        state: present

    - name: "Add key for helm repo"
      ansible.builtin.apt_key:
        url: https://baltocdn.com/helm/signing.asc
        keyring: /usr/share/keyrings/helm.gpg

    - name: "Get architecture"
      ansible.builtin.command: dpkg --print-architecture
      register: system_arch
      changed_when: false
      check_mode: false

    - name: "Add helm repo"
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ system_arch.stdout }} signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
        filename: helm-stable-debian

    - name: "Install helm"
      ansible.builtin.package:
        name: helm
        state: present

    - name: "Add mysql-operator helm repo"
      ansible.builtin.command: helm repo add mysql-operator https://mysql.github.io/mysql-operator/

    - name: "Update cache of mysql-operator helm repo"
      ansible.builtin.command: helm repo update

    - name: "Deploy mysql operator via helm chart"
      kubernetes.core.helm:
        name: mysql-operator
        chart_ref: mysql-operator/mysql-operator
        namespace: mysql-operator
        create_namespace: true
        values:
          envs:
            k8sClusterDomain: cluster.local

    - name: "Pause for 1 minute to wait for pods to start up"
      ansible.builtin.pause:
        minutes: 1

    - name: "Store AWS credentials in k8s secret"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            namespace: mysql-operator
            name: mysql-backups-s3-config
          data:
            credentials: "{{ lookup('ansible.builtin.file', '~/.aws/credentials') | b64encode }}"

    - name: "Deploy mysql cluster via helm chart"
      kubernetes.core.helm:
        name: mysql-cluster
        chart_ref: mysql-operator/mysql-innodbcluster
        namespace: mysql-operator
        create_namespace: true
        values:
          serverVersion: "{{ mysql_server_version }}"
          serverInstances: 3
          routerInstances: 2
          tls:
            useSelfSigned: true
          credentials:
            root:
              password: testpass #todo update here and below
          backupProfiles:
            - name: snapshot-profile-s3
              snapshot:
                storage:
                  s3:
                    prefix: mysql-backups
                    config: mysql-backups-s3-config
                    bucketName: "{{ aws_s3_backup_bucket }}"
                    profile: "{{ aws_profile }}"
              podAnnotations:
                backupTarget: s3
          backupSchedules:
            - name: daily-snapshot
              schedule: "0 3 * * *"
              timeZone: "US/Pacific"
              deleteBackupData: false
              backupProfileName: snapshot-profile-s3
              enabled: true

    - name: "Pause for 2 minutes to wait for pods to start up"
      ansible.builtin.pause:
        minutes: 2

    - name: "Create dev_db database"
      ansible.builtin.command: "kubectl -n mysql-operator exec -c mysql pod/mysql-cluster-0 -- /bin/mysql -u root --password=testpass -e 'create database if not exists dev_db;'"
